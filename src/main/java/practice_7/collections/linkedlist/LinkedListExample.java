package practice_7.collections.linkedlist;

import java.util.*;

public class LinkedListExample {
    public static void main(String[] args) {
        // 1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ LinkedList
        LinkedList<String> list = new LinkedList<>();
        System.out.println("–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π LinkedList: " + list);

        // 2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        list.add("A");    // –í –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        list.addFirst("B"); // –í –Ω–∞—á–∞–ª–æ
        list.addLast("C");  // –í –∫–æ–Ω–µ—Ü
        list.add(1, "D");   // –í—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 1
        System.out.println("–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: " + list); // [B, D, A, C]

        // 3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        list.remove("D"); // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        list.remove(1);   // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        list.removeFirst(); // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        list.removeLast();  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        System.out.println("–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏–π: " + list); // []

        // 4Ô∏è‚É£ –†–∞–±–æ—Ç–∞ –∫–∞–∫ –æ—á–µ—Ä–µ–¥—å (FIFO)
        LinkedList<Integer> queue = new LinkedList<>();
        queue.offer(1);  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
        queue.offer(2);
        queue.offer(3);
        System.out.println("–û—á–µ—Ä–µ–¥—å (FIFO): " + queue); // [1, 2, 3]
        System.out.println("–£–¥–∞–ª—ë–Ω —ç–ª–µ–º–µ–Ω—Ç: " + queue.poll()); // 1
        System.out.println("–û—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + queue); // [2, 3]

        // 5Ô∏è‚É£ –†–∞–±–æ—Ç–∞ –∫–∞–∫ —Å—Ç–µ–∫ (LIFO)
        LinkedList<Integer> stack = new LinkedList<>();
        stack.push(10); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ (–∫–∞–∫ –≤ —Å—Ç–µ–∫–µ)
        stack.push(20);
        stack.push(30);
        System.out.println("–°—Ç–µ–∫ (LIFO): " + stack); // [30, 20, 10]
        System.out.println("–£–¥–∞–ª—ë–Ω —ç–ª–µ–º–µ–Ω—Ç: " + stack.pop()); // 30
        System.out.println("–°—Ç–µ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: " + stack); // [20, 10]

        // 6Ô∏è‚É£ –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        LinkedList<String> accessList = new LinkedList<>(Arrays.asList("X", "Y", "Z"));
        System.out.println("–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: " + accessList.getFirst()); // X
        System.out.println("–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç: " + accessList.getLast()); // Z
        System.out.println("–≠–ª–µ–º–µ–Ω—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É 1: " + accessList.get(1)); // Y

        // 7Ô∏è‚É£ –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É
        System.out.print("–ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ LinkedList: ");
        for (String item : accessList) {
            System.out.print(item + " "); // X Y Z
        }
        System.out.println();

        // 8Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ListIterator –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –æ–±—Ö–æ–¥–∞
        ListIterator<String> iterator = accessList.listIterator();
        System.out.print("–ü—Ä—è–º–æ–π –æ–±—Ö–æ–¥: ");
        while (iterator.hasNext()) {
            System.out.print(iterator.next() + " "); // X Y Z
        }
        System.out.println();

        System.out.print("–û–±—Ä–∞—Ç–Ω—ã–π –æ–±—Ö–æ–¥: ");
        while (iterator.hasPrevious()) {
            System.out.print(iterator.previous() + " "); // Z Y X
        }
        System.out.println();

        // 9Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ArrayList –∏ LinkedList –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –≤ –Ω–∞—á–∞–ª–æ
        List<Integer> arrayList = new ArrayList<>();
        List<Integer> linkedList = new LinkedList<>();

        long start, end;

        // –í—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ (ArrayList)
        start = System.nanoTime();
        for (int i = 0; i < 10000; i++) {
            arrayList.add(0, i);
        }
        end = System.nanoTime();
        System.out.println("ArrayList: –≤—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ 10k —ç–ª–µ–º–µ–Ω—Ç–æ–≤ = " + (end - start) / 1_000_000 + " –º—Å");

        // –í—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ (LinkedList)
        start = System.nanoTime();
        for (int i = 0; i < 10000; i++) {
            linkedList.add(0, i);
        }
        end = System.nanoTime();
        System.out.println("LinkedList: –≤—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ 10k —ç–ª–µ–º–µ–Ω—Ç–æ–≤ = " + (end - start) / 1_000_000 + " –º—Å");

        // üîü –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        linkedList.clear();
        System.out.println("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: " + linkedList); // []

        // 1Ô∏è‚É£1Ô∏è‚É£ LinkedList —Å null-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        LinkedList<String> nullList = new LinkedList<>();
        nullList.add(null);
        nullList.add("Hello");
        nullList.add(null);
        System.out.println("LinkedList —Å null: " + nullList); // [null, Hello, null]

        // 1Ô∏è‚É£2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        Set<String> set = new HashSet<>(Arrays.asList("One", "Two", "Three"));
        LinkedList<String> fromSet = new LinkedList<>(set);
        System.out.println("LinkedList –∏–∑ Set: " + fromSet); // –ü–æ—Ä—è–¥–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–º

        // 1Ô∏è‚É£3Ô∏è‚É£ –î–≤—É–º–µ—Ä–Ω—ã–π LinkedList (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤)
        LinkedList<LinkedList<Integer>> matrix = new LinkedList<>();
        matrix.add(new LinkedList<>(Arrays.asList(1, 2, 3)));
        matrix.add(new LinkedList<>(Arrays.asList(4, 5, 6)));
        System.out.println("–î–≤—É–º–µ—Ä–Ω—ã–π LinkedList: " + matrix); // [[1, 2, 3], [4, 5, 6]]
    }
}

